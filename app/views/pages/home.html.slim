header.site-title
  h1 Jetpack
  h2 A minimal, modern, modular UI framework that helps without hurting.

h2 Why?
p In a world with so many existing UI frameworks, why did I bother
  creating this one?

p Jetpack is roughly half-way between Twitter Bootstrap and Compass. It includes
  both basic utilities and helpful presentational components, but it strives to
  only include things that will actually be useful in 90% of applications, so it
  isn't as big of a toolbelt as Compass, nor is it meant to design your entire app for you.
  Jetpack aims to hit the sweet spot of being helpful without being overkill.

p <strong>The biggest difference between Jetpack and the other mainstream UI frameworks is
  that Jetpack doesn't do anything unless you specifically ask it to.</strong>

p Jetpack doesn't automatically change your selectors or load javascript functions,
  or anything like that. In SCSS it gives you helpful mixins to pick and choose
  and use where you like. In Javascript it gives you functions you can call if
  you feel like it. In Rails it gives you a helper module that you can include if
  you want to.

p When you add Jetpack to your project <strong>nothing happens automatically</strong>.
  That means you never have to override anything you don't like, wonder where some settings
  came from, or change the way you name things to avoid conflicts with your framework.

p Some other neat things about Jetpack:

ol
  li It includes a really cool #{link_to 'fractional grid', page_path('grid')} system.
  li It's designed to be totally customizable.
  li It's totally modular, so it's really easy to pick and choose
     the bits that you like, while ignoring or replacing anything you don't.
  li It's optimized for Rails apps, which is helpful for many.

p If those sound like nice things for you, then you should give Jetpack
  a try. If not, well, there are like a million more of these UI frameworks out there,
  and I bet one of them will suit you nicely.

p If you want to know more about why and how Jetpack was created, see the
  <a href="#epilogue">Epilogue</a>.


h2 Quick Start

h3 Install
p
  | Add detailed installation instructions here.



h3 Modules
p
  | Jetpack is intended to be modular. All dependencies are included in the core
    module, everything else is totally independent and can be added or removed
    at any time.

h4 Presets <small>required*</small>
code @import 'jetpack/presets';
p Jetpack presets are required, BUT, the recommended approach is to copy
  and paste the presets file that ships with Jetpack into the top of your
  application manifest file and then tweak it as much as you like. As long
  as you've defined the variables that are set in <code>jetpack/presets</code>
  before you include the rest of jetpack, you're golden.


h4 Core <small>required</small>
code @import 'jetpack/core';
p Jetpack Core is the only required module. It includes basic utility
  mixins that the other modules rely on.

h4 Resetize <small>optional</small>
code @import 'jetpack/resetize';
p Jetpack Resetize is a mashup of Normalize and Formalize, with a
  few little tweaks thrown in for good measure. To my knowledge, these
  are the best reset libraries out there. The code is long, but thoroughly
  commented, so check that out if you want to see exactly what's set.

p <em>Note: this is one of only two files that include selectors
  (the other being jetpack/defaults). If you don't want any selectors
  added to your CSS for you, leave this out and include your own reset file
  or just don't bother with CSS reset. It's up to you.</em>

h4 Typography <small>optional</small>
code @import 'jetpack/typography';
p Jetpack Typography is a remix of the Typographic styles from Twitter
  Bootstrap. Among other things, I've toned down the size of the headings
  (geez!) and increased the color contrast.

h4 Fractionalize <small>optional</small>
code @import 'jetpack/fractionalize';
p Fractionalize is Jetpack's uber-badass grid system. It's not the typical
  span-something grid you're used to - instead, it's a method for dividing
  the page into fractional columns that reliably flow without any special
  markup or other shenanigans.

h4 Forms <small>optional</small>
code @import 'jetpack/forms';
p Jetpack includes a collection of different form layout mixins. The
  base styles for form elements are mostly set in the Resetize library,
  so if you're not using that the individual form elements will retain
  their default OS / Browser appearance. Element-level styles used in
  the Jetpack Forms mixins do not strictly depend on the Resetize library,
  but they probably will look better if you're using that (or something
  else that standardizes form element styles across browsers).

h4 Tables <small>optional</small>
code @import 'jetpack/tables';
p Jetpack Tables are a based on a remix of the table styles in
  Twitter Bootstrap. Simple, straightforward. Use 'em if you like.

h4 Interface <small>optional</small>
code @import 'jetpack/interface';
p Jetpack Interface is a set of helpers for common interface elements,
  like labels and buttons.

h4 Navigation <small>optional</small>
code @import 'jetpack/navigation';
p Jetpack Navigation is a set of helper styles for common nav UI
  elements.

h4 Selectors <small>optional</small>
code @import 'jetpack/selectors';
p Jetpack Defaults is the second file that includes selectors (the other being jetpack/resetize).
  If you'd like to have some simple stuff pre-defined for you, like <code>a.button</code>
  automatically including the default button style, then include this file.
  If you want to have total control over what gets included in your CSS stack, then just
  leave this out and only include the bits of Jetpack you want.

h4 Javascript <small>optional</small>
code
  | //= require jetpack
p You can add Jetpack JS to your application by requiring it in your JS manifest file.
  You'll get a few handy helpers here, including alert messages, tool tips, and modals.
  See the source for details.

h4 Helpers <small>optional</small>
code | require Jetpack::RailsHelper
p Jetpack Helpers is a set of Rails helpers that make it just a tad faster to put an app
  together. The <code>view_name</code> helper is really useful for CSS namespacing, and
  the <code>title</code> and <code>flash_messages</code> helpers are just quick timesavers
  that are used in nearly every app.


h2#epilogue
  | Epilogue<br>
  small A more in-depth discussion about how Jetpack came to be:

p I started building Jetpack in late 2011. At the time Twitter Bootstrap was just coming on
  the scene, and everyone was pretty enthusiastic about it (including me). In the past I had
  used css resets, things like Blueprint.CSS for grids, and created everything else from scratch
  on a per-application basis. The bootstrap idea was obviously a better approach.

p That said, there were several things about the Twitter Bootstrap implementation that bugged me:
ul
  li TB was written in LESS, while I strongly prefer SCSS.
  li TB is a bunch of selectors, meaning if you use it your css namespace is full of twitter stuff.
  li TB is used by adhering to specific markup and using a lot of presentation classes.
  li The CSS, intended markup, and JS in Bootstrap are all very tightly linked. Early on I found I
     the javascript in particular was very easy to break by changing the CSS, which is a huge red flag in my book.

p So, while I give the Twitter folks tons of credit for putting a great framework together and
  making it open source (so people like me could copy the pants off it!), I wanted to take a different
  approach. Here were my main goals:

ul
  li Don't pollute the CSS namespace with selectors.
  li Avoid forcing very specific markup whenever possible.
  li Avoid presentational css classes.
  li Make everything in the framework easily customizable, tweakable, refinable etc.

p So I started working on Jetpack, grabbing my favorite bits of Twitter Bootstrap and other CSS kits
  like Skeleton, Normalize, and Formalize. I blended some of my own work into this, including the
  Fractionalize library I already built. Then I started using it.

p Jetpack has now been in use in production apps for more than two years, and has been steadily
  refined along the way. It's getting very close to public release, at which time I'll add one more
  note to this epilogue business about where I hope it goes moving forward.
